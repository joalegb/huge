service: DatosEnterpriseMicroServices

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  timeout: 30
  deploymentBucket:
    name: com.serverless.${self:provider.stage}.deployment
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

  environment:
    CRYPTO_SECRET_STRING: ${self:custom.crypto_secret_string.${self:provider.stage}}
    MYSQL_DB_NAME: ${self:custom.mysql_db_name.${self:provider.stage}}
    MYSQL_DB_USERNAME: ${self:custom.mysql_db_username.${self:provider.stage}}
    MYSQL_DB_PASSWORD: ${self:custom.mysql_db_password.${self:provider.stage}}
    MYSQL_DB_HOST: ${self:custom.mysql_db_host.${self:provider.stage}}
custom:
  stages:
    - test
    - local
  allowed-headers:
    - Auth-Token
  crypto_secret_string:
    test: qwertyuiop1234567890
    local: qwertyuiop1234567890
  mysql_db_name:
    test: test
    local: local
  mysql_db_username:
    test: root
    local: root
  mysql_db_password:
    test: root
    local: root
  mysql_db_host:
    test: localhost
    local: localhost

package:
  exclude:
    - test/**
    - coverage/**

# Functions
functions:
  advertisement:
    handler: advertisement/advertisementIndex.handler
    events:
      - http:
          path: 'advertisement/{proxy+}'
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Auth-Token

  util:
    handler: util/utilIndex.handler
    events:
      - http:
          path: 'util/{proxy+}'
          method: POST
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Auth-Token

plugins:
  - serverless-offline
  - serverless-mocha-plugin
